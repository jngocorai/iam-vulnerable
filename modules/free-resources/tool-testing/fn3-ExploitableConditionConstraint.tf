data "aws_iam_policy_document" "fn3-exploitableConditionConstraint-policy-document" {

  statement {

    actions = [
      "iam:CreatePolicyVersion",
    ]

    effect = "Allow"

    resources = [
      "*",
    ]

    condition {
      test     = "DateGreaterThan"
      variable = "aws:TokenIssueTime"
      values = [
        "2020-01-01T00:00:01Z"
      ]
    }
  }
}





resource "aws_iam_policy" "fn3-exploitableConditionConstraint" {
  name        = "fn3-exploitableConditionConstraint"
  path        = "/"
  description = "Allows privesc via iam:CreatePolicyVersion"
  policy      = data.aws_iam_policy_document.fn3-exploitableConditionConstraint-policy-document.json
  tags = {
    yor_trace = "cbad74d3-efa3-4083-8a52-77704b9847e5"
  }
}

resource "aws_iam_role" "fn3-exploitableConditionConstraint-role" {
  name = "fn3-exploitableConditionConstraint-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          AWS = var.aws_assume_role_arn
        }
      },
    ]
  })
  tags = {
    yor_trace = "721afcd7-d62b-40e4-8be5-5c867d25892c"
  }
}


resource "aws_iam_user" "fn3-exploitableConditionConstraint-user" {
  name = "fn3-exploitableConditionConstraint-user"
  path = "/"
  tags = {
    yor_trace = "6005d714-41cc-4456-9a10-c7722d798733"
  }
}

resource "aws_iam_access_key" "fn3-exploitableConditionConstraint-user" {
  user = aws_iam_user.fn3-exploitableConditionConstraint-user.name
}


resource "aws_iam_user_policy_attachment" "fn3-exploitableConditionConstraint-user-attach-policy" {
  user       = aws_iam_user.fn3-exploitableConditionConstraint-user.name
  policy_arn = aws_iam_policy.fn3-exploitableConditionConstraint.arn
}

resource "aws_iam_role_policy_attachment" "fn3-exploitableConditionConstraint-role-attach-policy" {
  role       = aws_iam_role.fn3-exploitableConditionConstraint-role.name
  policy_arn = aws_iam_policy.fn3-exploitableConditionConstraint.arn

}  